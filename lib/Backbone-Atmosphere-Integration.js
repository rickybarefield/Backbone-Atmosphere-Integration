// Generated by CoffeeScript 1.4.0
(function() {
  var Backbone, findAll, socket, _;

  socket = $.atmosphere;

  Backbone = this.Backbone;

  _ = this._;

  findAll = function(model) {
    var request, subSocket;
    request = {
      url: model.url,
      contentType: "application/json",
      logLevel: 'debug',
      transport: 'websocket'
    };
    request.onOpen = function(response) {
      return console.log("onOpen: " + response);
    };
    request.onMessage = function(response) {
      var message;
      message = $.parseJSON(response.responseBody);
      console.log(message.event);
      if (message.event != null) {
        switch (message.event) {
          case "CREATE":
            return model.add(message.entity);
          case "UPDATE":
            return model.add(message.entity);
          case "DELETE":
            return model.remove(message.entity);
        }
      } else {
        return model.add(message);
      }
    };
    request.onError = function(response) {
      return console.log("error: " + response);
    };
    return subSocket = socket.subscribe(request);
  };

  Backbone.webserviceSync = function(method, model, options, error) {
    switch (method) {
      case "read":
        if (model.id != null) {
          return find(model);
        } else {
          return findAll(model);
        }
        break;
      case "create":
        break;
      case "update":
        break;
      case "delete":
    }
  };

  Backbone.overridenSync = Backbone.sync;

  Backbone.sync = function(method, model, options, error) {
    var _ref;
    if (options == null) {
      options = {};
    }
    if (method === "read" && ((model != null ? model.ws : void 0) || (model != null ? (_ref = model.collection) != null ? _ref.ws : void 0 : void 0))) {
      return Backbone.webserviceSync(method, model, options, error);
    } else {
      if (method === "create") {
        options.async = false;
      }
      return Backbone.overridenSync(method, model, options, error);
    }
  };

}).call(this);
